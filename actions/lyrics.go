package actions

import (
	"fmt"

	"github.com/tacnoman/mustard-api/models"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Lyric)
// DB Table: Plural (lyrics)
// Resource: Plural (Lyrics)
// Path: Plural (/lyrics)
// View Template Folder: Plural (/templates/lyrics/)

// LyricsResource is the resource for the Lyric model
type LyricsResource struct {
	buffalo.Resource
}

// List gets all Lyrics. This function is mapped to the path
// GET /lyrics
func (v LyricsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	lyrics := &models.Lyrics{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Lyrics from the DB
	if err := q.All(lyrics); err != nil {
		return err
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, lyrics))
}

// Show gets the data for one Lyric. This function is mapped to
// the path GET /lyrics/{lyric_id}
func (v LyricsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Lyric
	lyric := &models.Lyric{}

	// To find the Lyric the parameter lyric_id is used.
	if err := tx.Find(lyric, c.Param("lyric_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, lyric))
}

// Create adds a Lyric to the DB. This function is mapped to the
// path POST /lyrics
func (v LyricsResource) Create(c buffalo.Context) error {
	// Allocate an empty Lyric
	lyric := &models.Lyric{}

	// Bind lyric to the html form elements
	if err := c.Bind(lyric); err != nil {
		return err
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(lyric)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, lyric))
	}

	// and redirect to the lyrics index page
	return c.Render(201, r.Auto(c, lyric))
}

// Update changes a Lyric in the DB. This function is mapped to
// the path PUT /lyrics/{lyric_id}
func (v LyricsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Lyric
	lyric := &models.Lyric{}

	if err := tx.Find(lyric, c.Param("lyric_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Lyric to the html form elements
	if err := c.Bind(lyric); err != nil {
		return err
	}

	verrs, err := tx.ValidateAndUpdate(lyric)
	if err != nil {
		return err
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, lyric))
	}

	// and redirect to the lyrics index page
	return c.Render(200, r.Auto(c, lyric))
}

// Destroy deletes a Lyric from the DB. This function is mapped
// to the path DELETE /lyrics/{lyric_id}
func (v LyricsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return fmt.Errorf("no transaction found")
	}

	// Allocate an empty Lyric
	lyric := &models.Lyric{}

	// To find the Lyric the parameter lyric_id is used.
	if err := tx.Find(lyric, c.Param("lyric_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(lyric); err != nil {
		return err
	}

	// Redirect to the lyrics index page
	return c.Render(200, r.Auto(c, lyric))
}
